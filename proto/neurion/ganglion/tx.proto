syntax = "proto3";

package neurion.ganglion;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "neurion/ganglion/ion.proto";
import "neurion/ganglion/params.proto";

option go_package = "neurion/x/ganglion/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams           (MsgUpdateParams          ) returns (MsgUpdateParamsResponse          );
  rpc RegisterIon            (MsgRegisterIon           ) returns (MsgRegisterIonResponse           );
  rpc ReportUnavailableIon   (MsgReportUnavailableIon  ) returns (MsgReportUnavailableIonResponse  );
  rpc UnreportUnavailableIon (MsgUnreportUnavailableIon) returns (MsgUnreportUnavailableIonResponse);
  rpc AddValidator           (MsgAddValidator          ) returns (MsgAddValidatorResponse          );
  rpc RemoveValidator        (MsgRemoveValidator       ) returns (MsgRemoveValidatorResponse       );
  rpc ValidateAvailability   (MsgValidateAvailability  ) returns (MsgValidateAvailabilityResponse  );
  rpc RegisterPathway        (MsgRegisterPathway       ) returns (MsgRegisterPathwayResponse       );
  rpc StakePathway           (MsgStakePathway          ) returns (MsgStakePathwayResponse          );
  rpc RefundPathwayStake     (MsgRefundPathwayStake    ) returns (MsgRefundPathwayStakeResponse    );
  rpc InitUnstakePathway     (MsgInitUnstakePathway    ) returns (MsgInitUnstakePathwayResponse    );
  rpc ClaimProtocolFee       (MsgClaimProtocolFee      ) returns (MsgClaimProtocolFeeResponse      );
  rpc SettlePathwayStake     (MsgSettlePathwayStake    ) returns (MsgSettlePathwayStakeResponse    );
  rpc StakeToGanglion        (MsgStakeToGanglion       ) returns (MsgStakeToGanglionResponse       );
  rpc ClaimReward            (MsgClaimReward           ) returns (MsgClaimRewardResponse           );
  rpc UnstakeFromGanglion    (MsgUnstakeFromGanglion   ) returns (MsgUnstakeFromGanglionResponse   );
  rpc UpdatePathway          (MsgUpdatePathway         ) returns (MsgUpdatePathwayResponse         );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                          "authority";
  option           (amino.name) = "neurion/x/ganglion/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgRegisterIon {
  option (cosmos.msg.v1.signer) = "creator";
           string creator                = 1;
  repeated string capacities             = 2;
           uint64 stake                  = 3;
  repeated string endpoints              = 4;
           string description            = 5;
           string input_schema           = 6;
           string output_schema          = 7;
           uint64 fee_per_thousand_calls = 8;
}

message MsgRegisterIonResponse {}

message MsgReportUnavailableIon {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  string ion_address = 2;
}

message MsgReportUnavailableIonResponse {}

message MsgUnreportUnavailableIon {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  string ion_address = 2;
}

message MsgUnreportUnavailableIonResponse {}

message MsgAddValidator {
  option (cosmos.msg.v1.signer) = "creator";
  string creator           = 1;
  string validator_address = 2;
}

message MsgAddValidatorResponse {}

message MsgRemoveValidator {
  option (cosmos.msg.v1.signer) = "creator";
  string creator           = 1;
  string validator_address = 2;
}

message MsgRemoveValidatorResponse {}

message MsgValidateAvailability {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  string ion_address = 2;
  bool   available   = 3;
}

message MsgValidateAvailabilityResponse {
  string message = 1;
}

message MsgRegisterPathway {
  option (cosmos.msg.v1.signer) = "creator";
           string creator           = 1;
           string name              = 2;
           string description       = 3;
           bool   is_public         = 4;
  repeated string ions              = 5;
  repeated string field_maps_base64 = 6;
}

message MsgRegisterPathwayResponse {}

message MsgStakePathway {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 id    = 2;
  uint64 amount  = 3;
}

message MsgStakePathwayResponse {}

message MsgRefundPathwayStake {
  option (cosmos.msg.v1.signer) = "creator";
  string creator      = 1;
  uint64 id = 2;
  string user         = 3;
  uint64 num_calls    = 4;
}

message MsgRefundPathwayStakeResponse {}

message MsgInitUnstakePathway {
  option (cosmos.msg.v1.signer) = "creator";
  string creator      = 1;
  uint64 id = 2;
}

message MsgInitUnstakePathwayResponse {}

message MsgClaimProtocolFee {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
}

message MsgClaimProtocolFeeResponse {}

message MsgSettlePathwayStake {
  option (cosmos.msg.v1.signer) = "creator";
  string creator      = 1;
  uint64 id = 2;
  string user         = 3;
  uint64 num_calls    = 4;
}

message MsgSettlePathwayStakeResponse {}

message MsgStakeToGanglion {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 amount  = 2;
}

message MsgStakeToGanglionResponse {}

message MsgClaimReward {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
}

message MsgClaimRewardResponse {}

message MsgUnstakeFromGanglion {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 amount  = 2;
}

message MsgUnstakeFromGanglionResponse {}

message MsgUpdatePathway {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 id      = 2;
  string name              = 3;
  string description       = 4;
  bool   is_public         = 5;
  repeated string ions              = 6;
  repeated string field_maps_base64 = 7;
}

message MsgUpdatePathwayResponse {}

